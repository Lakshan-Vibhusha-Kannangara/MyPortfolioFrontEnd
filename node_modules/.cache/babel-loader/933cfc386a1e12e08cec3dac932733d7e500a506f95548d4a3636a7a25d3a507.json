{"ast":null,"code":"var _jsxFileName = \"/workspaces/MyPortfolioFrontEnd/src/components/TechStack.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './TechStack.css'; // Import the CSS file\n\n// TechCard component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TechCard = ({\n  technology\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"tech-card\",\n  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n    src: technology.image,\n    alt: technology.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: technology.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 3\n}, this);\n\n// TechStack component\n_c = TechCard;\nconst TechStack = () => {\n  _s();\n  const [technologyData, setTechnologyData] = useState([]);\n  useEffect(() => {\n    // Fetch technology data from the backend\n    fetch('http://3.27.140.194:4002/technologies') // Assuming the API endpoint is '/api/technologyData'\n    .then(response => response.json()).then(data => {\n      if (data.success) {\n        // If the response indicates success, set the technologyData state with the technology array\n        setTechnologyData(data.technology);\n      } else {\n        console.error('Failed to fetch technology data:', data);\n      }\n    }).catch(error => {\n      console.error('Error fetching technology data:', error);\n    });\n  }, []); // The empty array as the second argument ensures this effect runs once, similar to componentDidMount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '10px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tech-stack\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-container\",\n        children: technologyData.map((tech, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-item\",\n          children: /*#__PURE__*/_jsxDEV(TechCard, {\n            technology: tech\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 4\n  }, this);\n};\n_s(TechStack, \"NAtTakMLXMvWTt5OZOICcdzW6NA=\");\n_c2 = TechStack;\nexport default TechStack;\nvar _c, _c2;\n$RefreshReg$(_c, \"TechCard\");\n$RefreshReg$(_c2, \"TechStack\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TechCard","technology","className","children","src","image","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","TechStack","_s","technologyData","setTechnologyData","fetch","then","response","json","data","success","console","error","catch","style","margin","map","tech","index","_c2","$RefreshReg$"],"sources":["/workspaces/MyPortfolioFrontEnd/src/components/TechStack.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './TechStack.css'; // Import the CSS file\n\n// TechCard component\nconst TechCard: React.FC<{ technology: { name: string; image: string } }> = ({ technology }) => (\n  <div className=\"tech-card\">\n    <img src={technology.image} alt={technology.name} />\n    <p>{technology.name}</p>\n  </div>\n);\n\n// TechStack component\nconst TechStack: React.FC = () => {\n  const [technologyData, setTechnologyData] = useState<{ name: string; image: string }[]>([]);\n\n  useEffect(() => {\n    // Fetch technology data from the backend\n    fetch('http://3.27.140.194:4002/technologies') // Assuming the API endpoint is '/api/technologyData'\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.success) {\n          // If the response indicates success, set the technologyData state with the technology array\n          setTechnologyData(data.technology);\n        } else {\n          console.error('Failed to fetch technology data:', data);\n        }\n      })\n      .catch((error) => {\n        console.error('Error fetching technology data:', error);\n      });\n  }, []); // The empty array as the second argument ensures this effect runs once, similar to componentDidMount\n\n  return (\n   <div style={{margin:'10px'}}>\n     <div className=\"tech-stack\">\n      <div className=\"grid-container\">\n        {technologyData.map((tech, index) => (\n          <div key={index} className=\"grid-item\">\n            <TechCard technology={tech} />\n          </div>\n        ))}\n      </div>\n    </div>\n   </div>\n  );\n};\n\nexport default TechStack;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,iBAAiB,CAAC,CAAC;;AAE1B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAmE,GAAGA,CAAC;EAAEC;AAAW,CAAC,kBACzFF,OAAA;EAAKG,SAAS,EAAC,WAAW;EAAAC,QAAA,gBACxBJ,OAAA;IAAKK,GAAG,EAAEH,UAAU,CAACI,KAAM;IAACC,GAAG,EAAEL,UAAU,CAACM;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACpDZ,OAAA;IAAAI,QAAA,EAAIF,UAAU,CAACM;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACrB,CACN;;AAED;AAAAC,EAAA,GAPMZ,QAAmE;AAQzE,MAAMa,SAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGpB,QAAQ,CAAoC,EAAE,CAAC;EAE3FC,SAAS,CAAC,MAAM;IACd;IACAoB,KAAK,CAAC,uCAAuC,CAAC,CAAC;IAAA,CAC5CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACd,IAAIA,IAAI,CAACC,OAAO,EAAE;QAChB;QACAN,iBAAiB,CAACK,IAAI,CAACpB,UAAU,CAAC;MACpC,CAAC,MAAM;QACLsB,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEH,IAAI,CAAC;MACzD;IACF,CAAC,CAAC,CACDI,KAAK,CAAED,KAAK,IAAK;MAChBD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACCzB,OAAA;IAAK2B,KAAK,EAAE;MAACC,MAAM,EAAC;IAAM,CAAE;IAAAxB,QAAA,eAC1BJ,OAAA;MAAKG,SAAS,EAAC,YAAY;MAAAC,QAAA,eAC1BJ,OAAA;QAAKG,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAC5BY,cAAc,CAACa,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC9B/B,OAAA;UAAiBG,SAAS,EAAC,WAAW;UAAAC,QAAA,eACpCJ,OAAA,CAACC,QAAQ;YAACC,UAAU,EAAE4B;UAAK;YAAArB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC,GADtBmB,KAAK;UAAAtB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAET,CAAC;AAACG,EAAA,CAjCID,SAAmB;AAAAkB,GAAA,GAAnBlB,SAAmB;AAmCzB,eAAeA,SAAS;AAAC,IAAAD,EAAA,EAAAmB,GAAA;AAAAC,YAAA,CAAApB,EAAA;AAAAoB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}