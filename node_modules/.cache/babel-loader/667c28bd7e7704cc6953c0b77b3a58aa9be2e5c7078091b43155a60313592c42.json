{"ast":null,"code":"import _slicedToArray from\"/workspaces/MyPortfolioFrontEnd/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';import'./TechStack.css';// Import the CSS file\n// TechCard component\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TechCard=function TechCard(_ref){var technology=_ref.technology;return/*#__PURE__*/_jsxs(\"div\",{className:\"tech-card\",children:[/*#__PURE__*/_jsx(\"img\",{src:technology.image,alt:technology.name}),/*#__PURE__*/_jsx(\"p\",{children:technology.name})]});};// TechStack component\nvar TechStack=function TechStack(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),technologyData=_useState2[0],setTechnologyData=_useState2[1];useEffect(function(){// Fetch technology data from the backend\nfetch('http://localhost:4002/technologies')// Assuming the API endpoint is '/api/technologyData'\n.then(function(response){return response.json();}).then(function(data){if(data.success){// If the response indicates success, set the technologyData state with the technology array\nsetTechnologyData(data.technology);}else{console.error('Failed to fetch technology data:',data);}}).catch(function(error){console.error('Error fetching technology data:',error);});},[]);// The empty array as the second argument ensures this effect runs once, similar to componentDidMount\nreturn/*#__PURE__*/_jsx(\"div\",{style:{margin:'10px'},children:/*#__PURE__*/_jsx(\"div\",{className:\"tech-stack\",children:/*#__PURE__*/_jsx(\"div\",{className:\"grid-container\",children:technologyData.map(function(tech,index){return/*#__PURE__*/_jsx(\"div\",{className:\"grid-item\",children:/*#__PURE__*/_jsx(TechCard,{technology:tech})},index);})})})});};export default TechStack;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","TechCard","_ref","technology","className","children","src","image","alt","name","TechStack","_useState","_useState2","_slicedToArray","technologyData","setTechnologyData","fetch","then","response","json","data","success","console","error","catch","style","margin","map","tech","index"],"sources":["/workspaces/MyPortfolioFrontEnd/src/components/TechStack.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './TechStack.css'; // Import the CSS file\n\n// TechCard component\nconst TechCard: React.FC<{ technology: { name: string; image: string } }> = ({ technology }) => (\n  <div className=\"tech-card\">\n    <img src={technology.image} alt={technology.name} />\n    <p>{technology.name}</p>\n  </div>\n);\n\n// TechStack component\nconst TechStack: React.FC = () => {\n  const [technologyData, setTechnologyData] = useState<{ name: string; image: string }[]>([]);\n\n  useEffect(() => {\n    // Fetch technology data from the backend\n    fetch('http://localhost:4002/technologies') // Assuming the API endpoint is '/api/technologyData'\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.success) {\n          // If the response indicates success, set the technologyData state with the technology array\n          setTechnologyData(data.technology);\n        } else {\n          console.error('Failed to fetch technology data:', data);\n        }\n      })\n      .catch((error) => {\n        console.error('Error fetching technology data:', error);\n      });\n  }, []); // The empty array as the second argument ensures this effect runs once, similar to componentDidMount\n\n  return (\n   <div style={{margin:'10px'}}>\n     <div className=\"tech-stack\">\n      <div className=\"grid-container\">\n        {technologyData.map((tech, index) => (\n          <div key={index} className=\"grid-item\">\n            <TechCard technology={tech} />\n          </div>\n        ))}\n      </div>\n    </div>\n   </div>\n  );\n};\n\nexport default TechStack;\n"],"mappings":"qHAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,iBAAiB,CAAE;AAE1B;AAAA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBACA,GAAM,CAAAC,QAAmE,CAAG,QAAtE,CAAAA,QAAmEA,CAAAC,IAAA,KAAM,CAAAC,UAAU,CAAAD,IAAA,CAAVC,UAAU,oBACvFH,KAAA,QAAKI,SAAS,CAAC,WAAW,CAAAC,QAAA,eACxBP,IAAA,QAAKQ,GAAG,CAAEH,UAAU,CAACI,KAAM,CAACC,GAAG,CAAEL,UAAU,CAACM,IAAK,CAAE,CAAC,cACpDX,IAAA,MAAAO,QAAA,CAAIF,UAAU,CAACM,IAAI,CAAI,CAAC,EACrB,CAAC,EACP,CAED;AACA,GAAM,CAAAC,SAAmB,CAAG,QAAtB,CAAAA,SAAmBA,CAAA,CAAS,CAChC,IAAAC,SAAA,CAA4ChB,QAAQ,CAAoC,EAAE,CAAC,CAAAiB,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAApFG,cAAc,CAAAF,UAAA,IAAEG,iBAAiB,CAAAH,UAAA,IAExChB,SAAS,CAAC,UAAM,CACd;AACAoB,KAAK,CAAC,oCAAoC,CAAE;AAAA,CACzCC,IAAI,CAAC,SAACC,QAAQ,QAAK,CAAAA,QAAQ,CAACC,IAAI,CAAC,CAAC,GAAC,CACnCF,IAAI,CAAC,SAACG,IAAI,CAAK,CACd,GAAIA,IAAI,CAACC,OAAO,CAAE,CAChB;AACAN,iBAAiB,CAACK,IAAI,CAACjB,UAAU,CAAC,CACpC,CAAC,IAAM,CACLmB,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAEH,IAAI,CAAC,CACzD,CACF,CAAC,CAAC,CACDI,KAAK,CAAC,SAACD,KAAK,CAAK,CAChBD,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CACzD,CAAC,CAAC,CACN,CAAC,CAAE,EAAE,CAAC,CAAE;AAER,mBACCzB,IAAA,QAAK2B,KAAK,CAAE,CAACC,MAAM,CAAC,MAAM,CAAE,CAAArB,QAAA,cAC1BP,IAAA,QAAKM,SAAS,CAAC,YAAY,CAAAC,QAAA,cAC1BP,IAAA,QAAKM,SAAS,CAAC,gBAAgB,CAAAC,QAAA,CAC5BS,cAAc,CAACa,GAAG,CAAC,SAACC,IAAI,CAAEC,KAAK,qBAC9B/B,IAAA,QAAiBM,SAAS,CAAC,WAAW,CAAAC,QAAA,cACpCP,IAAA,CAACG,QAAQ,EAACE,UAAU,CAAEyB,IAAK,CAAE,CAAC,EADtBC,KAEL,CAAC,EACP,CAAC,CACC,CAAC,CACH,CAAC,CACF,CAAC,CAET,CAAC,CAED,cAAe,CAAAnB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}